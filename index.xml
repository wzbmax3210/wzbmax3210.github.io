<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>从入门到秃头</title>
    <link>http://example.org/</link>
    <description>Recent content on 从入门到秃头</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 16 Mar 2020 11:41:08 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue的两个版本</title>
      <link>http://example.org/posts/vue-install/</link>
      <pubDate>Mon, 16 Mar 2020 11:41:08 +0800</pubDate>
      
      <guid>http://example.org/posts/vue-install/</guid>
      <description>Vue的两种版本 Vue官方给我们提供了两种版本来使用: vue.js 完整版 vue.runtime.js 运行时版(非完整版)
vue.js提供了compiler模板的能力，这样可以将vue内置指令 v-if，v-for等和{{}}模板字符串能编译成浏览器所认识的html， 然后插入页面中渲染。
如：
// html &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; // main.js new Vue({ el: &amp;#34;#app&amp;#34;, template: ` &amp;lt;div&amp;gt;{{ value }}&amp;lt;/div&amp;gt; `, data: { value: 0 }, }) //最后得到 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;0&amp;lt;/div&amp;gt; 而vue.runtime.js则取消了compiler，体积减少了将近40%. 没有了compiler，vue.runtime.js提供render函数来返回html 如：
new Vue({ el: &amp;#34;#app&amp;#34;, data: { value: 0 }, // h相当于提供了createElement的功能  render(h) { h(&amp;#39;div&amp;#39;, this.value) } }) 但是在实际开发中我们用webpack的vue-loader将编写的html形式的代码 转换成render函数进行渲染，这样我们就能使用html编写的形式在体积小的运行时版本进行开发</description>
    </item>
    
    <item>
      <title>浅析Mvc</title>
      <link>http://example.org/posts/mvc/</link>
      <pubDate>Fri, 13 Mar 2020 10:14:38 +0800</pubDate>
      
      <guid>http://example.org/posts/mvc/</guid>
      <description>MVC是一种组织代码的形式，将数据相关放在Model中， 将视图相关放入View中，将操作和连接M和V放入Controller中。 比如在编写后端时，一般将数据库的表映射和主键等相关信息放在Model中， 然后View层放入前端模板文件，Controller梳理数据逻辑然后发送到View层。 一般来说这种编写代码方式在讲前后端分离的现在已经没多少人用了。
而前端处理数据又越来越多，所以我们现在可以将MVC的理念放在前端中。
MVC三个对象 我们可以将MVC抽象成三个对象
const model = { create() {}, delete() {}, update() {}, get() {} } const view = { el: &amp;#39;指定标签&amp;#39;, render() {} } const controller = { init() {} //可以在这做初始化和绑定事件等动作 } 主要的逻辑是数据发生变化时render()重新渲染视图 主要的问题是如何监听数据变化，我们可以用到一种EventBus的概念
import $ from &amp;#39;jquery&amp;#39; const eventBus = $({}) 因为jquery对象同时拥有监听和触发事件的方法，我们可以这样 在Model中触发自定义事件
model.udpate() { //修改数据后  eventBus.trigger(&amp;#39;changeData&amp;#39;) } 我们就可以在Controller中监听到
controller.init() { eventBus.on(&amp;#39;changeData&amp;#39;, () =&amp;gt; { view.render() }) } 表驱动编程 我们可以将数组、对象、Map等作为表进行查询等操作省去了switch或者无数个ifelse的操作 比如
function getChineseWeekByDate(date) { const numWeekDay = date.</description>
    </item>
    
    <item>
      <title>jQuery对象基本用法</title>
      <link>http://example.org/posts/jquery/</link>
      <pubDate>Fri, 28 Feb 2020 20:39:52 +0800</pubDate>
      
      <guid>http://example.org/posts/jquery/</guid>
      <description>jQuery 如何获取元素 将一个选择表达式放进构造函数jQuery()中(简写为$())，得到被选中的元素
$(document) //选择整个document对象 $(&amp;#39;#test&amp;#39;) //选择id为test的元素 $(&amp;#39;.cls&amp;#39;) //选择class为cls的元素 jQuery 的链式操作是怎样的 由于操作dom对象只需要呈现网页上的结果，不需要获得什么返回值 所以jQuery将dom操作返回jQuery对象，这样就可以实现类似如下的链式操作
$(&amp;#39;#test&amp;#39;).find(&amp;#39;.children&amp;#39;).addClass(&amp;#39;mark&amp;#39;) jQuery 如何创建元素 只需要将html元素写法的字符串传入jQuery对象即可
$(&amp;#39;&amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt;this is a div&amp;lt;/div&amp;gt;&amp;#39;) $(&amp;#39;ul&amp;#39;).append(&amp;#39;&amp;lt;li&amp;gt;item&amp;lt;/li&amp;gt;&amp;#39;) jQuery 如何移动元素 .insertAfter()和.after()：在现存元素的外部，从后面插入元素 .insertBefore()和.before()：在现存元素的外部，从前面插入元素 .appendTo()和.append()：在现存元素的内部，从后面插入元素 .prependTo()和.prepend()：在现存元素的内部，从前面插入元素 会返回被操作的元素，例如
$(&amp;#39;div&amp;#39;).after($(&amp;#39;p&amp;#39;)) //返回div元素 $(&amp;#39;p&amp;#39;).after($(&amp;#39;div&amp;#39;)) //返回p元素 jQuery 如何修改元素的属性 常见的如
.html() 取出或设置html内容 .text() 取出或设置text内容 .attr() 取出或设置某个属性的值 .width() 取出或设置某个元素的宽度 .height() 取出或设置某个元素的高度 .val() 取出某个表单元素的值 </description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>http://example.org/posts/js-function/</link>
      <pubDate>Mon, 02 Dec 2019 14:12:31 +0800</pubDate>
      
      <guid>http://example.org/posts/js-function/</guid>
      <description>let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  以上代码的执行结果是什么？
答案是6个6，而不是直觉上的0,1,2,3,4,5
 由于JavaScript是单线程，settimeout属异步任务，要在同步任务执行完后才去执行，所以先执行for循环
而执行完以后i已经变成6，所以在最后执行settimeout时会答应6个6
在ES6中如果我们写成
for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 则会打印出0,1,2,3,4,5
因为在let i = 0初始化写入for循环时，JavaScript会在每次循环时多创建一个临时的i，属于特别处理
我们还可以写成这样
let i = 0 for(i = 0; i&amp;lt;6; i++){ (function(i) { setTimeout(()=&amp;gt;{ console.log(i) },0) })(i) } 同样打印0,1,2,3,4,5 这里为每个回调函数构建单独的闭包作用域，这样返回的六个函数都有自己的独立闭包环境</description>
    </item>
    
    <item>
      <title>JS 对象基本用法</title>
      <link>http://example.org/posts/js-object/</link>
      <pubDate>Thu, 14 Nov 2019 09:13:14 +0800</pubDate>
      
      <guid>http://example.org/posts/js-object/</guid>
      <description>声明对象的两种用法 1.简写写法
let obj = {a: 1} 2.正式写法
let obj = new Object({a: 1}) 如何删除对象的属性 delete obj.xxx delete obj[&amp;#39;xxx&amp;#39;]  将属性值设为undefined并不等同于删除属性
用xxx in obj来判断obj是否含xxx属性，包括原形属性 也可以用obj.hasOwnProperty来判断，只判断非原型属性
 如何查看对象的属性   查看自身所有的属性用Object.keys(obj)，它将返回对象自身属性名的数组
  查看自身+公有属性（prototype）用console.dir(obj)
  如何修改或增加对象的属性  直接赋值  let obj = {name: &amp;#39;abc&amp;#39;} obj.name = &amp;#39;xxx&amp;#39; // name是字符串 obj[&amp;#39;name&amp;#39;] = &amp;#39;xxx&amp;#39; //name是字符串 obj[&amp;#39;na&amp;#39; + &amp;#39;me&amp;#39;] = &amp;#39;xxx&amp;#39; let key = &amp;#39;name&amp;#39; obj[key] = &amp;#39;xxx&amp;#39; //使用变量属性时要用中括号的写法 批量赋值 使用Object.assign(obj, {a: 1, b: 2})  </description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://example.org/posts/url/</link>
      <pubDate>Tue, 29 Oct 2019 14:22:02 +0800</pubDate>
      
      <guid>http://example.org/posts/url/</guid>
      <description>完整的URL包括以下内容
协议 + 域名或IP + 端口号 + 路径 + 查询字符串 + 锚点
例如:https://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=1#5
协议(protocol) 协议一般指网络数据交换规则，诸如HTTP(超文本传输协议)，FTP(文件传输协议)等
IP(Internet Protocol) 简单来说IP主要约定了两件事1:如何定位一台设备。2:如何封装数据报文并与其他设备交流
 几个特殊的ip:127.0.0.1表示自己，localhost通过hosts指定为自己，0.0.0.0不表示任何设备
 端口号(port) IP可以定位一台机器，而一台机器可以通过端口号提供不同的服务，如
 HTTP服务一般是80 HTTPS服务一般是443 FTP服务一般是21 一共有65535个端口  路径 由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。
查询字符串 可选，用于给动态网页传递参数，多个参数用&amp;amp;隔开
锚点 可以定位到网页的某个地方
域名 域名通过DNS(域名系统)解析到公网地址，也就是域名其实就是IP的别称。
 一个域名可以对应多个IP，这叫负载均衡，防止一台机器压力过大
一个IP可以对应多个域名，这叫共享主机
 当你输入域名在浏览器确认时，浏览器会向DNS服务器请求对应的IP，然后返回一个IP请求到相应的机器返回相应的网页内容
 就www.baidu.com来说，com是顶级域名，baidu.com是二级域名，www.baidu.com是三级域名
 </description>
    </item>
    
    <item>
      <title>CSS动画</title>
      <link>http://example.org/posts/css-animation/</link>
      <pubDate>Mon, 28 Oct 2019 17:47:02 +0800</pubDate>
      
      <guid>http://example.org/posts/css-animation/</guid>
      <description>浏览器渲染过程 在说CSS动画之前我们先来看下浏览器的简单渲染过程
 根据HTML构建HTML树(DOM) 根据CSS构建CSS树(CSSOM) 两棵树合并成Render Tree  然后进行Layout布局(文档流、盒模型、计算大小与位置) Paint绘制(边框颜色、文字颜色、阴影等) Composite合成(根据层叠关系展示画面)  JS更新样式 一般来说我们用JS来更新样式，有三种更新方式 如图所示
 整个渲染过程要重新走一遍，如div.remove() 跳过layout过程，一般是修改颜色的操作。 跳过layout和paint过程，比如我们要提到的css动画中改变transform   每个属性的修改触发的流程都不一样，具体可以查看Css Triggers
  CSS动画 介绍CSS动画前先介绍transform
主要的作用是允许我们对元素进行旋转、缩放、移动或倾斜
transform 有四个常用功能
 位移translate 缩放scale 旋转rotate 倾斜skew  具体用法查看transform MDN
 需要注意的是inline元素不支持transform，所以我们需要先将元素变成block元素
 一般CSS动画中有两种做法
transition(过渡) 作用主要是补充中间帧，用法是transition:属性名 时长 过渡方式 延迟
 属性名指规定设置过渡效果的css属性名称，如width，height(值为none时，没有属性会获得过渡效果，值为all时，所有属性都将获得过渡效果，多个属性用逗号隔开) 时长指过渡完所需要的时间，如.5s，200ms 过渡方式指类似动画效果，如linear线性过渡 延迟指多少秒后触发动画，如.5s，200ms  具体用法查看transition MDN
 不是所有属性都能过渡的，如display从block到none是没有过渡效果的。
 下面是用transform + transition制作的红心动画hover效果
animation + keyframes keyframes主要两种写法
@keyframes animationName { from { transform: translateX(0%); } to { transform: translateX(100%); } } @keyframes animationName { 0% { transform: translateX(0%); } 50% { transform: translateX(50%); } 100% { transform: translateX(100%); } } 具体用法查看@keyframes MDN</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://example.org/posts/html-tag/</link>
      <pubDate>Wed, 23 Oct 2019 17:06:01 +0800</pubDate>
      
      <guid>http://example.org/posts/html-tag/</guid>
      <description>&amp;lt;a&amp;gt;  作用  跳转外部页面 跳转内部锚点 跳转到邮箱或者电话  属性 href取值  表示http路径/a/b/c(根目录是http服务的目录) 以及 a/b/c 锚点 # 跳到顶部 #id 跳到对应id的标签 伪协议   javascript:; 用处：解决点击页面不刷新不变化的需求 邮箱 mailto:test@gmail.com 电话 tel:13111111111  target取值  _blank 新页面打开 _top iframe打开顶部 _self 本页打开 _parent iframe上一层打开 xxx 打开一个xxx的页面(window.name = xxx)，打开iframe name为xxx的页面  download 作用：不是打开页面，而是下载页面问题：不是所有浏览器支持，手机浏览器支持程度最差
&amp;lt;table&amp;gt;  相关的标签  &amp;lt;thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tfoot&amp;gt; &amp;lt;tr&amp;gt;(table row) &amp;lt;td&amp;gt;(table data) &amp;lt;th&amp;gt;(table head)  相关的样式  table-layout设置表格布局算法 auto 浏览器自动 fixed 等宽 border-spacing表格边框间隙 border-collapse collapse合并表格边框  &amp;lt;img&amp;gt;  作用 发出get请求，展示一张图片</description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>http://example.org/posts/how-to-build-hugo/</link>
      <pubDate>Wed, 23 Oct 2019 14:20:26 +0800</pubDate>
      
      <guid>http://example.org/posts/how-to-build-hugo/</guid>
      <description>1.从Hugo官网的Install页面下载相应系统的安装文件
 因为自己是windows7，所以使用hugo_0.57.2_Windows-64bit.zip解压后得到exe文件 然后将exe文件所在的目录加入环境变量
 2.验证是否安装成功
 在命令行中执行hugo version，安装成功会输出版本信息
我的是Hugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z
 3.创建站点
 输入hugo new site myblog就会得到一个myblog的目录
 4.添加文章
 进入myblog目录，输入hugo new posts/first-post.md就会在content/posts下生成first-post.md文件， 就可以在这里面使用md语法写blog。
记得在最终要发布的时候将draft:true改成false，draft是草稿的意思
 5.预览文章
 输入hugo server -D，然后根据提示打开http://localhost:1313/就可以看到文章效果
 6.生成静态页面
 输入hugo就会在public目录下生成静态页面文件 此时可以将public单独设置一个仓库关联github然后就可以将博客上传到github page
 </description>
    </item>
    
  </channel>
</rss>